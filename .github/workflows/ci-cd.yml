name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-minimal.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-minimal.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test imports
      run: |
        python -c "import main_simple; print('âœ… main_simple imports successfully')"
        python -c "from src.analysis import analyze_research_potential; print('âœ… analysis module imports successfully')"
    
    - name: Run tests
      run: |
        pytest tests/ -v --tb=short
    
    - name: Test API endpoints
      run: |
        python -m pytest tests/test_api.py -v

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security tools
      run: |
        pip install safety bandit
    
    - name: Check for security vulnerabilities
      run: |
        pip install -r requirements-minimal.txt
        safety check
    
    - name: Run bandit security linter
      run: |
        bandit -r . -x tests/ -f json -o bandit-report.json || true
        bandit -r . -x tests/ --severity-level medium

  deployment-check:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Simulate Railway deployment
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-minimal.txt
        echo "âœ… Dependencies install successfully"
    
    - name: Test application startup
      run: |
        timeout 30s python -m uvicorn main_simple:app --host 0.0.0.0 --port 8000 &
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        echo "âœ… Application starts and health check passes"
    
    - name: Run integration tests
      run: |
        python -m pytest tests/test_integration.py -v
    
    - name: Create deployment summary
      run: |
        echo "## ðŸš€ Deployment Ready" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… All tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Security checks passed" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Application startup verified" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Health check endpoint working" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Railway can safely deploy this version!" >> $GITHUB_STEP_SUMMARY
